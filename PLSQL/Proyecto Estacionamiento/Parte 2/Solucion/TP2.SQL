

--TEMA 1
CREATE OR REPLACE PACKAGE  PCK_ESTAC 
IS
	TYPE REC_ANUAL IS RECORD (
		NOMBRE VARCHAR2(200),
		TIPO_RODADO VARCHAR2(20),
		MARCA VARCHAR2(30),
		CANTIDAD NUMBER(6),
		TOTAL NUMBER(15)
	);
	TYPE TAB_ANUAL IS TABLE OF REC_ANUAL INDEX BY BINARY_INTEGER;
	PROCEDURE P_GENERAR_CUOTAS (P_ID_MOVIMIENTO M_MOVIMIENTOS.ID_MOVIMIENTO%TYPE);
	FUNCTION F_CALCULAR_INTERES (P_MONTO NUMBER, PLAZO NUMBER, TASA NUMBER) RETURN NUMBER;
	FUNCTION F_MULTA_ANUAL (CRITERIO VARCHAR2, APELLIDO VARCHAR2 DEFAULT NULL) RETURN TAB_ANUAL;

END;
/

CREATE OR REPLACE PACKAGE BODY PCK_ESTAC IS
	PROCEDURE P_GENERAR_CUOTAS (P_ID_MOVIMIENTO M_MOVIMIENTOS.ID_MOVIMIENTO%TYPE) IS
		AUX NUMBER := 0;
		CURSOR C_MOVIMIENTOS(P_ID_MOVIMIENTO NUMBER) IS
			SELECT *
			FROM M_MOVIMIENTOS M
			WHERE M.ID_MOVIMIENTO = P_ID_MOVIMIENTO;
		R_MOVIMIENTOS C_MOVIMIENTOS%ROWTYPE;
		V_INTERES NUMBER;
		V_CUOTAS NUMBER;
		V_CUOTAS_CORRIENTES NUMBER;
		V_PRIMERA_CUOTA NUMBER;
	BEGIN
		-- VERIFICACIONES
		SELECT COUNT(*)
		INTO AUX
		FROM M_MOVIMIENTOS M
		WHERE M.ID_MOVIMIENTO = P_ID_MOVIMIENTO;
		
		IF AUX = 0 THEN
			RAISE_APPLICATION_ERROR(-20001,'NO EXISTE EL ID_MOVIMIENTO INGRESADO');
		END IF;
		
		AUX := 0;
		SELECT COUNT(*)
		INTO AUX
		FROM M_MOVIMIENTOS M
		WHERE M.ID_MOVIMIENTO = P_ID_MOVIMIENTO AND M.TIPO_PAGO = 'CR';
		
		IF AUX = 0 THEN
			RAISE_APPLICATION_ERROR(-20002,'NO ES UNA VENTA A CREDITO');
		END IF;
		-- GERERAR CUOTAS
		OPEN C_MOVIMIENTOS(P_ID_MOVIMIENTO);
		FETCH C_MOVIMIENTOS INTO R_MOVIMIENTOS;
		CLOSE C_MOVIMIENTOS;
		
		V_INTERES := F_CALCULAR_INTERES(R_MOVIMIENTOS.MONTO_TOTAL, R_MOVIMIENTOS.PLAZO, R_MOVIMIENTOS.TASA_INTERES);
		V_CUOTAS :=  V_INTERES/R_MOVIMIENTOS.PLAZO;
		V_CUOTAS_CORRIENTES := FLOOR(V_CUOTAS);
		V_PRIMERA_CUOTA :=V_CUOTAS_CORRIENTES + ((V_CUOTAS - V_CUOTAS_CORRIENTES) * R_MOVIMIENTOS.PLAZO);
		
		FOR I IN 1 .. R_MOVIMIENTOS.PLAZO LOOP
			IF I = 1 THEN
				INSERT INTO M_CUOTAS (ID_MOVIMIENTO, NRO_CUOTA, MONTO_CUOTA, FECHA_VENCIMIENTO) VALUES(
					R_MOVIMIENTOS.ID_MOVIMIENTO, I , V_PRIMERA_CUOTA, ADD_MONTHS(TRUNC(R_MOVIMIENTOS.FECHA,'MM'),I) );
			ELSE
				INSERT INTO M_CUOTAS (ID_MOVIMIENTO, NRO_CUOTA, MONTO_CUOTA, FECHA_VENCIMIENTO) VALUES(
					R_MOVIMIENTOS.ID_MOVIMIENTO, I , V_CUOTAS_CORRIENTES, ADD_MONTHS(TRUNC(R_MOVIMIENTOS.FECHA,'MM'),I) );
			END IF;
		END LOOP;
	END;
	
	
	
	FUNCTION F_CALCULAR_INTERES (P_MONTO NUMBER, PLAZO NUMBER, TASA NUMBER) RETURN NUMBER IS
		V_CAPITAL NUMBER;
	BEGIN
		V_CAPITAL := P_MONTO * POWER(1 + ((TASA/100)/12),(PLAZO));
		RETURN V_CAPITAL;
	END F_CALCULAR_INTERES;
	
	
	FUNCTION F_MULTA_ANUAL (CRITERIO VARCHAR2, APELLIDO VARCHAR2 DEFAULT NULL) RETURN TAB_ANUAL IS
		V_SENTENCIA VARCHAR2(3000);
		V_ANUAL TAB_ANUAL;
	BEGIN
		IF CRITERIO NOT IN('P', 'U') THEN
			RAISE_APPLICATION_ERROR(-20003,'CRITERIO NO VALIDO.');
		END IF;
		
		V_SENTENCIA := Q'[SELECT 
					U.NOMBRE||' '||U.APELLIDO NOM_APE, 
					TR.DESCRIPCION AS TIPO_RODADO,
					M.NOMBRE_MARCA AS MARCA,
					COUNT(I.ID_INFRACCION) CANT_INFRA,
					SUM(I.IMPORTE_MULTA) TOTAL_INFRA]';
		IF CRITERIO = 'U' THEN
			V_SENTENCIA:= V_SENTENCIA ||' '|| Q'[FROM M_USUARIOS U 
			INNER JOIN M_RODADOS R ON U.ID_USUARIO = R.ID_USUARIO 
			INNER JOIN M_TIPO_RODADO TR ON R.COD_TIPO_RODADO = TR.COD_TIPO_RODADO
			INNER JOIN M_MARCAS M ON R.COD_MARCA = M.COD_MARCA
			INNER JOIN M_INFRACCIONES I ON R.MATRICULA = I.MATRICULA	
			WHERE EXTRACT(YEAR FROM I.FECHA) = EXTRACT(YEAR FROM SYSDATE) AND I.FECHA_PAGO IS NOT NULL]';
		ELSE
			V_SENTENCIA := V_SENTENCIA ||' '|| Q'[FROM M_PERSONAL U 
			INNER JOIN M_INFRACCIONES I ON U.CEDULA = I.CEDULA_GUARDIA
			INNER JOIN M_RODADOS R ON R.MATRICULA = I.MATRICULA 
			INNER JOIN M_TIPO_RODADO TR ON R.COD_TIPO_RODADO = TR.COD_TIPO_RODADO
			INNER JOIN M_MARCAS M ON R.COD_MARCA = M.COD_MARCA
			WHERE EXTRACT(YEAR FROM I.FECHA) = EXTRACT(YEAR FROM SYSDATE) AND I.FECHA_PAGO IS NOT NULL]';
		END IF;
		
		IF APELLIDO IS NOT NULL THEN
			V_SENTENCIA := V_SENTENCIA||' '||'AND U.APELLIDO = :APE';
		END IF;
		V_SENTENCIA:= V_SENTENCIA||' '||Q'[GROUP BY U.NOMBRE||' '||U.APELLIDO, TR.DESCRIPCION,M.NOMBRE_MARCA]';
		DBMS_OUTPUT.PUT_LINE(V_SENTENCIA);
		 IF APELLIDO IS NOT NULL THEN
			EXECUTE IMMEDIATE V_SENTENCIA BULK COLLECT INTO V_ANUAL USING APELLIDO;
		ELSE
			EXECUTE IMMEDIATE V_SENTENCIA BULK COLLECT INTO V_ANUAL;
		END IF;
		DBMS_OUTPUT.PUT_LINE('TIPO_RODADO			NOMBRE			MARCA			CANTIDAD			TOTAL');
		FOR I IN 1 .. V_ANUAL.COUNT LOOP
			DBMS_OUTPUT.PUT_LINE(V_ANUAL(I).NOMBRE||'		'||V_ANUAL(I).TIPO_RODADO||'		'||V_ANUAL(I).MARCA||'		'||V_ANUAL(I).CANTIDAD||'		'||V_ANUAL(I).TOTAL);
		END LOOP;
		RETURN V_ANUAL;
		
	END F_MULTA_ANUAL;
END;
/

--TEMA 2
CREATE OR REPLACE TRIGGER BIU_TEST_COMPUESTO
FOR INSERT ON M_DETALLE_MOVIMIENTOS
COMPOUND TRIGGER
	--DECLARACION
	V_DURACION M_SALDO_ACTIVADO.TIEMPO_ADQUIRIDO%TYPE;
	R_TICKET_TARIFA M_TARIFAS%ROWTYPE;
	V_IMPORTE_INTERES NUMBER;
	V_IMPORTE M_TARIFAS.COSTO_PATENTADO%TYPE;
	V_COD_TIPO M_INFRACCIONES.COD_TIPO_TARIFA%TYPE := 0;
	V_MATRICULA M_INFRACCIONES.MATRICULA%TYPE;
	RODADO_INFRA M_RODADOS%ROWTYPE; 
	R_TARIFA M_TARIFAS%ROWTYPE;
	R_AUX NUMBER(5);
	CURSOR C_CABECERA (P_ID_MOV NUMBER ) IS
		SELECT *
		FROM M_MOVIMIENTOS M
		WHERE M.ID_MOVIMIENTO = P_ID_MOV;
	R_CABECERA C_CABECERA%ROWTYPE;
	
	CURSOR C_RODADOS (P_ID_USU NUMBER) IS
		SELECT	*
		FROM M_RODADOS R
		WHERE R.ID_USUARIO = P_ID_USU;
	
	TYPE T_RODADOS IS TABLE OF M_RODADOS%ROWTYPE INDEX BY BINARY_INTEGER;
	V_RODADOS T_RODADOS;
	
	AFTER EACH ROW  IS
	BEGIN
		IF :NEW.ID_INFRACCION IS NULL THEN
			SELECT *
			INTO R_TICKET_TARIFA
			FROM M_TARIFAS T
			WHERE T.COD_TIPO_TARIFA = :NEW.COD_TIPO_TARIFA;
			-- TENEMOS TODOS LOS DATOS DE LA TARIFA DEL TICKET A ESTACIONAR;
			IF R_TICKET_TARIFA.UNIDAD_TIEMPO = 'M' THEN
				V_DURACION := 160 * R_TICKET_TARIFA.DURACION;
			ELSIF R_TICKET_TARIFA.UNIDAD_TIEMPO = 'D' THEN
				V_DURACION := 8 * R_TICKET_TARIFA.DURACION;
			ELSE
				V_DURACION :=  R_TICKET_TARIFA.DURACION;
			END IF;
			
			INSERT INTO M_SALDO_ACTIVADO (ID_TICKET, ID_MOVIMIENTO, ITEM, INICIO_VIGENCIA ,FIN_VIGENCIA, CONSUMO_EN_HORAS, TIEMPO_ADQUIRIDO)
			VALUES (
				(SELECT MAX(ID_TICKET) + 1 FROM M_SALDO_ACTIVADO),
				:NEW.ID_MOVIMIENTO,
				:NEW.ITEM,
				TRUNC(SYSDATE),
				ADD_MONTHS(SYSDATE,1),
				0,
				V_DURACION
			);
		ELSE
			OPEN C_CABECERA(:NEW.ID_MOVIMIENTO);
			FETCH C_CABECERA INTO R_CABECERA;
			CLOSE C_CABECERA;
			
			UPDATE M_INFRACCIONES
			SET FECHA_PAGO = R_CABECERA.FECHA,
				IMPORTE_MULTA = :NEW.IMPORTE
			WHERE ID_INFRACCION = :NEW.ID_INFRACCION;

			--  Actualizar el importe pagado con el 
			--importe del detalle que se está insertando (PREGUNTAR)
		END IF;
		
		IF R_CABECERA.TIPO_PAGO = 'CR' THEN
			PCK_ESTAC.P_GENERAR_CUOTAS(R_CABECERA.ID_MOVIMIENTO); --VER
		END IF;
	
	END AFTER EACH ROW;
	
	BEFORE EACH ROW IS
	BEGIN
		--PASO 1
		OPEN C_CABECERA(:NEW.ID_MOVIMIENTO);
		FETCH C_CABECERA INTO R_CABECERA;
		CLOSE C_CABECERA;
		-- PASO 2
		OPEN C_RODADOS(R_CABECERA.ID_USUARIO);
		FETCH C_RODADOS BULK COLLECT INTO V_RODADOS;
		CLOSE C_RODADOS;
		
		IF V_RODADOS.COUNT = 0 THEN
			RAISE_APPLICATION_ERROR(-20004,'Tipo de rodado no existe o no pertenece al mismo usuario');
		END IF;
		-- PASO 3
		IF :NEW.ID_INFRACCION IS NOT NULL THEN
				R_AUX:=0;
				SELECT COUNT(*)
				INTO  R_AUX
				FROM M_INFRACCIONES I 
				WHERE I.ID_INFRACCION = :NEW.ID_INFRACCION AND I.FECHA_PAGO IS NULL
				AND I.MATRICULA IN (SELECT R.MATRICULA FROM M_RODADOS R WHERE R.ID_USUARIO = R_CABECERA.ID_USUARIO );
		
				-- OBTENEMOS COD_TIPO_TARIFA DE LA TABLA INFRACCIONES
				IF R_AUX = 0 THEN 
					RAISE_APPLICATION_ERROR(-20005,'Infracción no existe o ya está pagada');
				ELSE
					SELECT I.COD_TIPO_TARIFA,I.MATRICULA
					INTO V_COD_TIPO, V_MATRICULA
					FROM M_INFRACCIONES I 
					WHERE I.ID_INFRACCION = :NEW.ID_INFRACCION AND I.FECHA_PAGO IS NULL
					AND I.MATRICULA IN (SELECT R.MATRICULA FROM M_RODADOS R WHERE R.ID_USUARIO = R_CABECERA.ID_USUARIO )
					GROUP BY I.COD_TIPO_TARIFA,I.MATRICULA;
					:NEW.COD_TIPO_TARIFA := V_COD_TIPO;
				END IF;
		END IF;
		-- PASO 4
		-- RECORREMOS NUESTRO VECTOR DE VEHICULOS(EL USUARIO PUEDE TENER MAS DE UN VEHICULO)
		FOR I IN 1 .. V_RODADOS.COUNT LOOP
			IF V_RODADOS(I).MATRICULA = :NEW.MATRICULA THEN --BUSCAMOS EL NUMERO DE MATRICULA ENTRE LOS VEHICULOS DEL USUARIO
				RODADO_INFRA.MATRICULA := V_MATRICULA;
				RODADO_INFRA.ID_USUARIO := V_RODADOS(I).ID_USUARIO;
				RODADO_INFRA.NRO_CHASIS := V_RODADOS(I).NRO_CHASIS;
				RODADO_INFRA.ANIO := V_RODADOS(I).ANIO;
				RODADO_INFRA.DESCRIPCION := V_RODADOS(I).DESCRIPCION;
				RODADO_INFRA.COD_MARCA := V_RODADOS(I).COD_MARCA;
				RODADO_INFRA.HABILITACION_MUNICIPIO := V_RODADOS(I).HABILITACION_MUNICIPIO;
				RODADO_INFRA.COD_TIPO_RODADO := V_RODADOS(I).COD_TIPO_RODADO;
				RODADO_INFRA.VTO_HABILITACION := V_RODADOS(I).VTO_HABILITACION;
			END IF;
			
		END LOOP;
		R_AUX:= 0;
		SELECT COUNT(*)
		INTO R_AUX
		FROM M_TARIFAS T
		WHERE T.COD_TIPO_TARIFA = :NEW.COD_TIPO_TARIFA AND T.COD_TIPO_RODADO = RODADO_INFRA.COD_TIPO_RODADO;
		
		IF R_AUX = 0 THEN 
		RAISE_APPLICATION_ERROR(-20006,'Tipo de rodado no coincide con el de la tarifa');
		END IF;
		
		SELECT *
		INTO R_TARIFA
		FROM M_TARIFAS T
		WHERE T.COD_TIPO_TARIFA = :NEW.COD_TIPO_TARIFA AND T.COD_TIPO_RODADO = RODADO_INFRA.COD_TIPO_RODADO;
		
		--ASIGNACION DEL IMPORTE PATENTADO
		IF RODADO_INFRA.HABILITACION_MUNICIPIO = 'S' THEN
			V_IMPORTE := R_TARIFA.COSTO_PATENTADO;
		ELSE
			V_IMPORTE := R_TARIFA.COSTO_NOPATENTADO;
		END IF;
		--INTERES TIENE EL VALOR A INSERTAR (PARA NO VOLVER A PREGUNTAR QUE TIPO_PAGO ES)
		
		IF R_CABECERA.TIPO_PAGO = 'CR' THEN
			V_IMPORTE_INTERES :=  PCK_ESTAC.F_CALCULAR_INTERES(V_IMPORTE, R_CABECERA.PLAZO, R_CABECERA.TASA_INTERES);
		ELSE
			V_IMPORTE_INTERES := V_IMPORTE;
		END IF;
		
		:NEW.IMPORTE := V_IMPORTE_INTERES;
		
	END BEFORE EACH ROW;
	END;
/

/*PRUEBAS 
INSERT INTO M_MOVIMIENTOS VALUES(
6,
SYSDATE,
'001-002-6547415',
100,
'CR',
6,
12,
3000000
);
EXEC PCK_ESTAC.P_GENERAR_CUOTAS(6);
/*FUNCIONA EL PAQUETE*/

/*PRUEBA TRIGGER*/
--PASO 1 ES INSERTAR CON U  ID_MOVIMIENTO QUE NO EXISTE
--INSERTAR EL MOVIMIENTO, INFRACCION Y LUEGO EL DETALLE
/*INSERT INTO M_DETALLE_MOVIMIENTOS VALUES(
6,
1,
3,
3000000,
NULL,
'KLI654'
);

INSERT INTO M_INFRACCIONES VALUES (
	4,
	SYSDATE,
	NULL,
	NULL,
	2455778,
	'KLI654',
	3000000,
	13
);
DELETE FROM M_INFRACCIONES WHERE ID_INFRACCION = 4;


SELECT * FROM M_INFRACCIONES WHERE ID_INFRACCION = 4;
SELECT * FROM M_DETALLE_MOVIMIENTOS WHERE ID_MOVIMIENTO = 6;*/

--PASO3
/*HACER EL FOR PARA RECORRER TODOS LOS VEHICULOS QUE TIENE EL usuario
			--PROBAR PREGUNTADO PARA CADA ITERACION SI EL CONT SIGUE SIENDO 0
			--SI YA NO ES IGUAL A 0 DEBERIA DE SALIR UA DEL FOR PARA QUE NO HAGA MUCHAS VECES
			-- CUANDO YA ENCONTRO LA MATRICULA
			-- O TAMBIEN PODEMOS HACER IN(SUBQUERI QUE NOS TRAIGA TODOS LOS TODADOS
			
DECLARE
	V_AUX PCK_ESTAC.TAB_ANUAL;
BEGIN 
	V_AUX:= PCK_ESTAC.F_MULTA_ANUAL('P','LOPEZ');
END;


SELECT
                                        U.NOMBRE||' '||U.APELLIDO NOM_APE,
                                        TR.DESCRIPCION AS TIPO_RODADO,
                                        M.NOMBRE_MARCA AS MARCA,
                                        COUNT(I.ID_INFRACCION)
CANT_INFRA,
                                        SUM(I.IMPORTE_MULTA) TOTAL_INFRA FROM M_PERSONAL U
                        INNER JOIN M_INFRACCIONES I ON U.CEDULA = I.CEDULA_GUARDIA
                        INNER JOIN
M_RODADOS R ON R.MATRICULA = I.MATRICULA
                        INNER JOIN M_TIPO_RODADO TR ON R.COD_TIPO_RODADO = TR.COD_TIPO_RODADO
                        INNER JOIN M_MARCAS M ON
R.COD_MARCA = M.COD_MARCA
                        WHERE EXTRACT(YEAR FROM I.FECHA) = EXTRACT(YEAR FROM SYSDATE) AND I.FECHA_PAGO IS NOT NULL AND U.APELLIDO = 'ARGUELLO'
GROUP BY U.NOMBRE||' '||U.APELLIDO, TR.DESCRIPCION,M.NOMBRE_MARCA*/

