--CREACION DE LA CABECERA DEL PAQUETE 
CREATE OR REPLACE PACKAGE PACK_ART IS
    FUNCTION F_CALCULAR_STOCK (P_ID_ART NUMBER) RETURN NUMBER;
    PROCEDURE P_INCREMENTAR_ARTICULO (P_ID NUMBER, P_CANT NUMBER);
	PROCEDURE P_INCREMENTAR_VENTA (P_ID_VENTA NUMBER, P_MONTO NUMBER);
END PACK_ART;
/

--CREACION DEL BODY DEL PAQUETE
CREATE OR REPLACE PACKAGE BODY PACK_ART IS
    FUNCTION F_CALCULAR_STOCK (P_ID_ART NUMBER) RETURN NUMBER IS
        V_STOCK B_ARTICULOS.STOCK_ACTUAL%TYPE;
    BEGIN
        SELECT A.STOCK_ACTUAL
        INTO V_STOCK
        FROM B_ARTICULOS A
        WHERE A.ID = P_ID_ART;
        RETURN V_STOCK;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'Error: ' || SQLCODE || ' - ' || SQLERRM);
    END F_CALCULAR_STOCK;
    
    PROCEDURE P_INCREMENTAR_ARTICULO (P_ID NUMBER, P_CANT NUMBER) IS 
    BEGIN
        UPDATE B_ARTICULOS
        SET STOCK_ACTUAL = STOCK_ACTUAL - P_CANT
        WHERE ID = P_ID;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'Error: ' || SQLCODE || ' - ' || SQLERRM);
    END P_INCREMENTAR_ARTICULO;
	
	PROCEDURE P_INCREMENTAR_VENTA (P_ID_VENTA NUMBER, P_MONTO NUMBER) IS
	BEGIN
		UPDATE B_VENTAS V
		SET V.MONTO_TOTAL = V.MONTO_TOTAL + P_MONTO
		WHERE V.ID = P_ID_VENTA;
	EXCEPTION
		WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'Error: ' || SQLCODE || ' - ' || SQLERRM);
	END P_INCREMENTAR_VENTA;
END PACK_ART;
/
/* PROBAR PAQUETE
DECLARE
	V_NUMERO NUMBER(3);
BEGIN
	PACK_ART.P_INCREMENTAR_ARTICULO(123456,-1);
	V_NUMERO := PACK_ART.F_CALCULAR_STOCK(123456);
	DBMS_OUTPUT.PUT_LINE(V_NUMERO);
	
END;
/
*/
CREATE OR REPLACE TRIGGER TR_PEDIDOS 
AFTER INSERT OR DELETE ON B_DETALLE_VENTAS 
FOR EACH ROW
DECLARE
BEGIN

	IF DELETING OR UPDATING THEN
		PACK_ART.P_INCREMENTAR_ARTICULO(:OLD.ID_ARTICULO, :OLD.CANTIDAD * -1);
		
		PACK_ART.P_INCREMENTAR_VENTA(:OLD.ID_VENTA, (:OLD.CANTIDAD * :OLD.PRECIO) * -1);
	ELSIF INSERTING OR UPDATING THEN
		PACK_ART.P_INCREMENTAR_ARTICULO(:NEW.ID_ARTICULO, :NEW.CANTIDAD);
		
		PACK_ART.P_INCREMENTAR_VENTA(:NEW.ID_VENTA, :NEW.CANTIDAD * :NEW.PRECIO);
	END IF;
END;
/
/*
PRUEBA
INSERT INTO B_DETALLE_VENTAS VALUES(5,646237,2,9,200000); VER B_ARTICULOS
SELECT * FROM B_ARTICULOS WHERE ID =646237; DISMINUYE EL STOCK_ACTUAL;

DELETE FROM B_DETALLE_VENTAS WHERE ID_VENTA = 5 AND ID_ARTICULO = 646237; VER B_ARTICULOS
SELECT * FROM B_ARTICULOS WHERE ID =646237; AUMETA EL STOCK_ACTUAL
*/

CREATE OR REPLACE TRIGGER TR_MODIFICAR_STOCK
BEFORE UPDATE OF STOCK_ACTUAL ON B_ARTICULOS
FOR EACH ROW
DECLARE
    V_STOCK_MINIMO NUMBER(5);
BEGIN
    -- Obtener el valor de STOCK_MINIMO para el art√≠culo
    SELECT STOCK_MINIMO INTO V_STOCK_MINIMO
    FROM B_ARTICULOS
    WHERE ID = :OLD.ID;

    -- Validar que el nuevo valor de STOCK_ACTUAL no sea <= 0
    IF :NEW.STOCK_ACTUAL <= 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El nuevo valor de STOCK_ACTUAL no puede ser menor o igual a 0.');
    END IF;

    -- Validar que el STOCK_ACTUAL no sea menor que el STOCK_MINIMO
    IF :NEW.STOCK_ACTUAL < V_STOCK_MINIMO THEN
        -- Calcular la cantidad pedida como STOCK_MINIMO + 25%
        DECLARE
            V_CANTIDAD_PEDIDA NUMBER(3);
        BEGIN
            V_CANTIDAD_PEDIDA := V_STOCK_MINIMO + CEIL(V_STOCK_MINIMO * 0.25);

            -- Insertar un registro en la tabla PEDIDOS
            INSERT INTO PEDIDOS (ID_ARTICULO, CANTIDAD_PEDIDA, FECHA_PEDIDO)
            VALUES (:OLD.ID, V_CANTIDAD_PEDIDA, SYSDATE);
        END;
    END IF;
END;
/


/*CREATE TABLE PEDIDOS (
	ID_ARTICULO NUMBER(5) PRIMARY KEY,
	CANTIDAD_PEDIDA NUMBER(3),
	FECHA_PEDIDO DATE@
);*/

