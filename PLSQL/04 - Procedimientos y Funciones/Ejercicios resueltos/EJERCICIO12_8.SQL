CREATE OR REPLACE PROCEDURE P_DETALLE_VENTA (I_VENTAS IN NUMBER, I_ARTICULO IN NUMBER, I_CANTIDAD IN NUMBER) IS
	
	VV_PRECIO B_ARTICULOS.PRECIO%TYPE;
	AUX B_VENTAS.ID%TYPE;
	
	
	
	FUNCTION F_VERIFICAR_ARTICULO (ID_ART NUMBER, CANT NUMBER) RETURN NUMBER IS
		V_PRECIO B_ARTICULOS.PRECIO%TYPE;
		BEGIN
			SELECT PRECIO
			INTO V_PRECIO
			FROM B_ARTICULOS 
			WHERE ID = I_ARTICULO AND CANT <= STOCK_ACTUAL;
			RETURN V_PRECIO;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
			--DBMS_OUTPUT.PUT_LINE('TERMINO LA EJECUCION.');
			RETURN -1;
		END;
		
		
		
		
	BEGIN
		SELECT ID
		INTO AUX
		FROM B_VENTAS 
		WHERE ID = I_VENTAS;
		IF SQL%NOTFOUND THEN
			DBMS_OUTPUT.PUT_LINE('No se encuentra la venta.');
		ELSE
			VV_PRECIO := F_VERIFICAR_ARTICULO(I_ARTICULO, I_CANTIDAD);
			IF VV_PRECIO = -1 THEN
				DBMS_OUTPUT.PUT_LINE('“El artículo no existe o no cuenta con stock suficiente.');
				RAISE NO_DATA_FOUND;
			ELSE
				INSERT INTO B_DETALLE_VENTAS (ID_ARTICULO, ID_VENTA, NUMERO_ITEM, CANTIDAD, PRECIO) VALUES (
					I_ARTICULO, I_VENTAS, (SELECT MAX(NUMERO_ITEM) + 1 FROM B_DETALLE_VENTAS), I_CANTIDAD, VV_PRECIO 
				);
				UPDATE B_VENTAS
				SET MONTO_TOTAL = MONTO_TOTAL + (VV_PRECIO * I_CANTIDAD)
				WHERE ID = I_VENTAS;
				
				UPDATE B_ARTICULOS
				SET STOCK_ACTUAL = STOCK_ACTUAL - I_CANTIDAD
				WHERE ID = I_ARTICULO;
			END IF;	
		END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('TERMINO LA EJECUCION.');
		WHEN OTHERS THEN
        -- Manejo de otras excepciones
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLCODE || ' - ' || SQLERRM);
	END;
/

-- SHOW ERRORS PROCEDURE P_DETALLE_VENTA; ---> PARA VER ERRORES